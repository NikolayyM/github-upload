// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RomaniaOrders.Data;

namespace RomaniaOrders.Data.Migrations
{
    [DbContext(typeof(RomaniaOrdersDbContext))]
    partial class RomaniaOrdersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("RomaniaOrders.Data.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int")
                        .HasColumnName("producer_id");

                    b.HasKey("Id");

                    b.HasIndex("ProducerId");

                    b.ToTable("brand");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CountyId")
                        .HasColumnType("int")
                        .HasColumnName("county_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("city");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("address");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<ulong>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int?>("SocietyId")
                        .HasColumnType("int")
                        .HasColumnName("society_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("SocietyId");

                    b.ToTable("client");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("region_id");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("county");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Distributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("exchange_rate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("distributor");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("group");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DistributorId")
                        .HasColumnType("int")
                        .HasColumnName("distributor_id");

                    b.Property<decimal>("RebateAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("rebate_amount");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DistributorId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("RebateQuantity")
                        .HasColumnType("int")
                        .HasColumnName("rebate_quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("producer");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("base_price");

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<ulong>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("RomanianName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("romanian_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("Vat")
                        .HasColumnType("int")
                        .HasColumnName("vat");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.ProductPrices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DistributorId")
                        .HasColumnType("int")
                        .HasColumnName("distributor_id");

                    b.Property<decimal>("PriceInRON")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("prices_in_ron");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_prices");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("region");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Society", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GroupId");

                    b.ToTable("society");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Brand", b =>
                {
                    b.HasOne("RomaniaOrders.Data.Models.Producer", "Producer")
                        .WithMany("Brands")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.City", b =>
                {
                    b.HasOne("RomaniaOrders.Data.Models.County", "County")
                        .WithMany("Cities")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("County");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Client", b =>
                {
                    b.HasOne("RomaniaOrders.Data.Models.City", "City")
                        .WithMany("Clients")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RomaniaOrders.Data.Models.Society", "Society")
                        .WithMany("Clients")
                        .HasForeignKey("SocietyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Society");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.County", b =>
                {
                    b.HasOne("RomaniaOrders.Data.Models.Region", "Region")
                        .WithMany("Counties")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Order", b =>
                {
                    b.HasOne("RomaniaOrders.Data.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RomaniaOrders.Data.Models.Distributor", "Distributor")
                        .WithMany("Orders")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Distributor");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.OrderDetails", b =>
                {
                    b.HasOne("RomaniaOrders.Data.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RomaniaOrders.Data.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Product", b =>
                {
                    b.HasOne("RomaniaOrders.Data.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.ProductPrices", b =>
                {
                    b.HasOne("RomaniaOrders.Data.Models.Distributor", "Distributor")
                        .WithMany("ProductPrices")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RomaniaOrders.Data.Models.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Distributor");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Society", b =>
                {
                    b.HasOne("RomaniaOrders.Data.Models.City", "City")
                        .WithMany("Societies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RomaniaOrders.Data.Models.Group", "Group")
                        .WithMany("Societies")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.City", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Societies");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.County", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Distributor", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Group", b =>
                {
                    b.Navigation("Societies");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Producer", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Region", b =>
                {
                    b.Navigation("Counties");
                });

            modelBuilder.Entity("RomaniaOrders.Data.Models.Society", b =>
                {
                    b.Navigation("Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
